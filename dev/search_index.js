var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [GeometricAlgebra]","category":"page"},{"location":"reference/#GeometricAlgebra.AbstractMultivector","page":"Reference","title":"GeometricAlgebra.AbstractMultivector","text":"AbstractMultivector{sig}\n\nSupertype of all elements in the geometric algebra over the vector space with metric signature sig, retrieved with the signature method.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.Blade","page":"Reference","title":"GeometricAlgebra.Blade","text":"Blade{sig,k,bits,T} <: HomogeneousMultivector{sig,k}\n\nA blade of grade k with basis blade bits and scalar coefficient of type T.\n\nParameters\n\nsig: metric signature defining the parent geometric algebra\nk: grade of the blade, equal to grade(bits) === count_ones(bits)\nbits: unsigned integer representing the indices of the basis vectors whose wedge product is the unit blade\nT: type of the scalar coefficient\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.HomogeneousMultivector","page":"Reference","title":"GeometricAlgebra.HomogeneousMultivector","text":"HomogeneousMultivector{sig,k} <: AbstractMultivector{sig}\n\nSupertype of grade k elements in the geometric algebra with metric signature sig.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.MixedMultivector","page":"Reference","title":"GeometricAlgebra.MixedMultivector","text":"MixedMultivector{sig,S} <: AbstractMultivector{sig}\n\nAn generally inhomogeneous multivector.\n\nAll elements of a geometric algebra are representable as a MixedMultivector.\n\nParameters\n\nsig: metric signature defining the parent geometric algebra\nS: type in which the multivector components are stored; usually a vector-like or dictionary-like type\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.Multivector","page":"Reference","title":"GeometricAlgebra.Multivector","text":"Multivector{sig,k,S} <: HomogeneousMultivector{sig,k}\n\nA homogeneous multivector of grade k with storage type S.\n\nParameters\n\nsig: metric signature defining the parent geometric algebra\nk: grade of the multivector\nS: type in which the multivector components are stored; usually a vector-like or dictionary-like type\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.OffsetSignature","page":"Reference","title":"GeometricAlgebra.OffsetSignature","text":"OffsetSignature(sig, indices)\n\nMetric signature sig with offset indices, enabling non-standard indexing for multivectors.\n\nExample\n\njulia> lorentzian = OffsetSignature((-1,1,1,1), 0:3) # zero-based indexing\n⟨-+++⟩ with indices 0:3\n(pretty-printed OffsetSignature{(-1, 1, 1, 1), 0:3}())\n\njulia> (1:4)'basis(lorentzian) # construct spacetime 4-vector\nGrade-1 Multivector{⟨-+++⟩ with indices 0:3, 1, Vector{Int64}}:\n 1 v0\n 2 v1\n 3 v2\n 4 v3\n\njulia> ans[0] # get first (\"time\") component\n1\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.ShowWrapper","page":"Reference","title":"GeometricAlgebra.ShowWrapper","text":"ShowWrapper\n\nWrapper around an all-bits object which displays as if the object was printed directly.\n\nExamples\n\njulia> GeometricAlgebra.ShowWrapper(\"⟨+++⟩\")\n⟨+++⟩\n\njulia> typeof(ans)\nGeometricAlgebra.ShowWrapper{Symbol(\"⟨+++⟩\")}\n\n\n\n\n\n","category":"type"},{"location":"reference/#Base.:*-Tuple{AbstractMultivector, AbstractMultivector}","page":"Reference","title":"Base.:*","text":"*(::AbstractMultivector, ::AbstractMultivector)\n\nGeometric product. See GeometricAlgebra.geometric_prod.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.:~","page":"Reference","title":"Base.:~","text":"~(a::AbstractMultivector)\nreversion(a::AbstractMultivector)\n\nThe reverse of a multivector.\n\nThe reversion antiautomorphism ρ is defined by ρ(u) = u on vectors and ρ(ab) = ρ(b)ρ(a) on higher-grade elements.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.eltype-Union{Tuple{Type{var\"#s2\"} where var\"#s2\"<:(Blade{sig, k, bits, T} where {sig, k, bits})}, Tuple{T}} where T","page":"Reference","title":"Base.eltype","text":"eltype(a)\n\nThe numerical type of the components of a multivector or multivector type.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:∗-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.:∗","text":"∗(a, b)\n\nScalar product of multivectors, equal to scalar(a*b).\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:∧-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.:∧","text":"∧(a, b)\n\nWedge product of multivectors.\n\nFor homogeneous multivectors, a∧b is of grade grade(a) + grade(b). For mixed multivectors, the definition extends by linearity to ab = _pq a_p b_q_p + q.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:⋅-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.:⋅","text":"⋅(a, b)\n\nGeneralized inner product (or \"fat\" dot product) of multivectors.\n\nFor homogeneous multivectors, a⋅b is of grade abs(grade(a) - grade(b)). For mixed multivectors, the definition extends by linearity to ab = _pq a_p b_q_p - q.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:⨼-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.:⨼","text":"⨼(a, b)\n\nLeft contraction of multivectors.\n\nFor homogeneous multivectors, a⨼b is of grade grade(b) - grade(a). For mixed multivectors, the definition extends by linearity to ab = _pq a_p b_q_q - p.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:⨽-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.:⨽","text":"⨽(a, b)\n\nRight contraction of multivectors.\n\nFor homogeneous multivectors, a⨽b is of grade grade(a) - grade(b). For mixed multivectors, the definition extends by linearity to ab = _pq a_p b_q_p - q.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.bits_to_indices","page":"Reference","title":"GeometricAlgebra.bits_to_indices","text":"bits_to_indices(bits)\n\nReturn the positions of the ones in the unsigned integer bits.\n\nUsed to convert between representations of a unit blade. See also GeometricAlgebra.indices_to_bits.\n\nExamples\n\njulia> GeometricAlgebra.bits_to_indices(0b1001101)\n4-element Vector{Int64}:\n 1\n 3\n 4\n 7\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.bitsof-Union{Tuple{Type{var\"#s10\"} where var\"#s10\"<:(Blade{sig, k, bits, T} where {sig, k, T})}, Tuple{bits}} where bits","page":"Reference","title":"GeometricAlgebra.bitsof","text":"bitsof(a::Blade{sig,k,bits,T}) = bits\n\nThe bits parameter of a blade, representing its basis k-blade.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.factor_from_squares-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.factor_from_squares","text":"Compute the overall factor arising from the geometric product between repeated basis vectors.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.geometric_prod","page":"Reference","title":"GeometricAlgebra.geometric_prod","text":"a*b\ngeometric_prod(a, b)\n\nGeometric product of multivectors.\n\nIf both arguments are blades, then the result is a Blade. Otherwise, the geometric product is general MixedMultivector.\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.getcomponent","page":"Reference","title":"GeometricAlgebra.getcomponent","text":"getcomponent(a::AbstractMultivector, I...)\na[I...]\n\nReturn the component of the multivector a corresponding to the basis blade defined by I.\n\nExamples\n\njulia> v = basis((1, 1, 1));\n\njulia> a = 1 + 2v[1] + 3v[2]v[3];\n\njulia> a[], a[1], a[2], a[2,3]\n(1, 2, 0, 3)\n\njulia> GeometricAlgebra.getcomponent(a, 3, 2)\n-3\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.graded_prod","page":"Reference","title":"GeometricAlgebra.graded_prod","text":"graded_prod(a, b, grade_selector::Function)\n\nHomogenised geometric product with resulting grade given as a function of the grades of a and b.\n\nIf a_p and b_q are multivectors of grade p and q respectively, then this is equal to a_p b_q_k(pq) where k(pq) is grade_selector(p, q). If a or b are multi-graded, then this extends linearly to _pq a_p b_q_k(pq).\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.homogeneous_prod","page":"Reference","title":"GeometricAlgebra.homogeneous_prod","text":"homogeneous_prod(a, b, Val(k))\n\nThe grade k part of the geometric product of a and b, i.e., ab_k. Equivalent to, but more efficient than, grade(geometric_prod(a, b), k).\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.indices_to_bits","page":"Reference","title":"GeometricAlgebra.indices_to_bits","text":"indices_to_bits(indices)\n\nCreate unsigned integer with bits at the positions given in the vector indices.\n\nUsed to convert between representations of a unit blade. See also GeometricAlgebra.bits_to_indices.\n\nExamples\n\njulia> GeometricAlgebra.indices_to_bits([1, 2, 5]) |> UInt16 |> bitstring\n\"0000000000010011\"\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.involute","page":"Reference","title":"GeometricAlgebra.involute","text":"involute(a::AbstractMultivector)\n\nThe involute of a multivector, negating the odd-grade part.\n\nThe involution automorphism ι is defined by ι(u) = -u on vectors and ι(ab) = ι(a)ι(b) on higher-grade elements.\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.mapcomponents-Tuple{Any, Blade}","page":"Reference","title":"GeometricAlgebra.mapcomponents","text":"mapcomponents(f, a::AbstractMultivector; kwargs...)\n\nApply a mapping f :: Blade -> Scalar component-wise to a. The function f is given a Blade representing each component, and should return a scalar (not a blade).\n\nThe same keyword arguments as best_type are accepted, including set_eltype and promote_eltype_with which can be used to specify the eltype of the resultant multivector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.next_bit_permutation-Tuple{Unsigned}","page":"Reference","title":"GeometricAlgebra.next_bit_permutation","text":"Return the smallest uint larger than the one given which has the same number of binary ones. Algorithm is Gosper's hack.\n\njulia> GeometricAlgebra.next_bit_permutation(0b1011) |> bitstring\n\"00001101\"\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.normalize_bv_index-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.normalize_bv_index","text":"Convert human-readable basis vector index or symbol into 1-based integer index\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.pretty_print_type_parameters-Tuple{IO, Type, Vararg{Any, N} where N}","page":"Reference","title":"GeometricAlgebra.pretty_print_type_parameters","text":"pretty_print_type_parameters(io, T, fns...)\n\nPrint a Type (DataType or UnionAll) with each parameter pretty-printed if it is specified. The ith type parameter is displayed as what fns[i] returns when called with the parameter.\n\nExamples\n\njulia> pretty_print_type_parameters(stdout, Array{T,2} where T,\n       \tidentity,\n       \tn -> \"$n-dimensional\")\nArray{T, 2-dimensional} where T\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.reversion","page":"Reference","title":"GeometricAlgebra.reversion","text":"~(a::AbstractMultivector)\nreversion(a::AbstractMultivector)\n\nThe reverse of a multivector.\n\nThe reversion antiautomorphism ρ is defined by ρ(u) = u on vectors and ρ(ab) = ρ(b)ρ(a) on higher-grade elements.\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.show_blade-Tuple{IO, Blade}","page":"Reference","title":"GeometricAlgebra.show_blade","text":"Display blade with parentheses surrounding coefficient if necessary.\n\njulia> GeometricAlgebra.show_blade(stdout, Blade{(x=1,)}(1 + im, 0b1))\n(1 + 1im) x\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.show_mixedmultivector-Tuple{IO, MixedMultivector}","page":"Reference","title":"GeometricAlgebra.show_mixedmultivector","text":"Display inhomogeneous MixedMultivector with each grade on a new line.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.show_multivector-Tuple{IO, Multivector}","page":"Reference","title":"GeometricAlgebra.show_multivector","text":"Display a multivector as a column of blades, with coefficients aligned using the native alignment mechanism, and blades basis aligned.\n\njulia> GeometricAlgebra.show_multivector(stdout, 1e3x + y + 1e-3z)\n1000.0   x\n   1.0   y\n   0.001 z\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.show_signature-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.show_signature","text":"Pretty-print metric signature in short, non-parseable form such as ⟨-+++⟩\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.sign_from_swaps-Tuple{Unsigned, Unsigned}","page":"Reference","title":"GeometricAlgebra.sign_from_swaps","text":"Compute sign flips of blade product due to transposing basis vectors. (The full sign of the product will also depend on the basis norms.)\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.@basis-Tuple{Any, Vararg{Any, N} where N}","page":"Reference","title":"GeometricAlgebra.@basis","text":"@basis sig\n@basis x y z...\n\nPopulate the local namespace with basis blades of all grades for the geometric algebra with signature sig, which may be provided as a string, tuple, named tuple or <:AbstractMetricSignature. If multiple arguments are given, each is interpreted as specifying the label and square (defaulting to 1) of a basis vector. For an n-dimensional signature, 2^n basis blades are defined.\n\nSee also @basisall.\n\nExamples\n\njulia> @basis \"+++\"\n[ Info: Defined basis blades v, v1, v2, v3, v12, v13, v23, v123\n\njulia> @basis (+1,0,-1)\n[ Info: Defined basis blades v, v1, v2, v3, v12, v13, v23, v123\n\njulia> @basis x y\n[ Info: Defined basis blades x, y, xy\n\njulia> @basis dt=-1 dx=1 dy\n[ Info: Defined basis blades dt, dx, dy, dtdx, dtdy, dxdy, dtdxdy\n\njulia> dt^2 + dxdy*dy\nMixedMultivector{⟨dt-,dx+,dy+⟩, Vector{Int64}}:\n -1\n 1 dx\n\n\n\n\n\n","category":"macro"},{"location":"reference/#GeometricAlgebra.@basisall-Tuple{Any, Vararg{Any, N} where N}","page":"Reference","title":"GeometricAlgebra.@basisall","text":"@basisall\n\nSimilarly to @basis, populate the local namespace with basis blades, but including all permutations of the basis blades.\n\nNote that more than 2^n variables are defined for a signature of dimension n!\n\nExample\n\njulia> @basisall x y z\n[ Info: Defined basis blades x, y, z, xy, yx, xz, zx, yz, zy, xyz, xzy, yxz, yzx, zxy, zyx\n\njulia> zyx\nGrade-3 Blade{⟨x+,y+,z+⟩, 3, 0b111, Int64}:\n -1 xyz\n\n\n\n\n\n","category":"macro"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"using GeometricAlgebra","category":"page"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"using GeometricAlgebra\nx, y, z = basis((x=1, y=1, z=1))","category":"page"},{"location":"#GeometricAlgebra.jl","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"","category":"section"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"GeometricAlgebra.jl aims to provide a simple interface for geometric algebra (a.k.a. Clifford algebra) in the Julia language.","category":"page"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"using GeometricAlgebra\nx, y, z = basis((1, 1, 1)); # basis for the algebra of physical space\na = x + 2y + 3z # vector\nR = exp(π/4*x*y) # rotor\nR*a*~R # rotate the vector","category":"page"},{"location":"#Quick-start","page":"GeometricAlgebra.jl","title":"Quick start","text":"","category":"section"},{"location":"#Generate-basis-vectors-for-algebra-of-given-signature","page":"GeometricAlgebra.jl","title":"Generate basis vectors for algebra of given signature","text":"","category":"section"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"basis((1, 1, 1)) # also `basis(3)`\n\nbasis((x=-1, y=-1, z=-1)) # labelled anti-Euclidean basis\n\nbasis(OffsetSignature((t=-1, x=+1, y=+1, z=+1), 0:3)) |> sum","category":"page"},{"location":"#Perform-arithmetic-on-blades","page":"GeometricAlgebra.jl","title":"Perform arithmetic on blades","text":"","category":"section"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"x*y*z # a grade 3 blade \n\nx - 3y # a vector, or grade 1 multivector\n\n(1 - 2x*y)/(1 + x*y) # an inhomogeneous multivector of mixed grade\n\nans^10","category":"page"},{"location":"#Other-products-and-operations","page":"GeometricAlgebra.jl","title":"Other products and operations","text":"","category":"section"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"math code description\nab a∧b wedge product (typed \\wedge<tab>)\nab a⋅b interior (or \"fat\" dot) product\nab  ab a∗b == scalar(a*b) scalar product (\\ast<tab>)\ntildea ~a reversion\nab a⨼b left contraction (\\intprod<tab>)\nab a⨽b right contraction (\\intprodr<tab>)\na_k grade(a, k) grade production","category":"page"},{"location":"#Component-access","page":"GeometricAlgebra.jl","title":"Component access","text":"","category":"section"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"v = basis(3)\na = 1 + 2v[1] + 3v[1]v[2]+ 4v[1]v[2]v[3]\na[2,1] # access the yx = -xy component\na[] == scalar(a) == 1\npseudoscalar(a)","category":"page"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"For labelled signatures such as (x=1, y=1, z=1), you can access components using the basis labels, too:","category":"page"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"x, y, z = basis((x=1, y=1, z=1))\na = x - y\na[:x]\na[2]","category":"page"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"Physics convention dictates that the components of spacetime tensors are numbered from zero. Non one-based indexing is possible with an OffsetSignature:","category":"page"},{"location":"","page":"GeometricAlgebra.jl","title":"GeometricAlgebra.jl","text":"STA = OffsetSignature((+1,-1,-1,-1), 0:3)\nv = basis(STA)\na = rand(UInt8, 4)'v\na[0] # first (\"time\") component","category":"page"}]
}
