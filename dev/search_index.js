var documenterSearchIndex = {"docs":
[{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"CurrentModule = GeometricAlgebra\nDocTestSetup = quote\n\tusing GeometricAlgebra\nend","category":"page"},{"location":"design/#Design-and-Internals","page":"Design and Internals","title":"Design and Internals","text":"","category":"section"},{"location":"design/#Multivector-Types","page":"Design and Internals","title":"Multivector Types","text":"","category":"section"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"There are three concrete types for representing elements in a geometric algebra, arranged in the following type hierarchy:","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"                   AbstractMultivector{Sig}\n                     /                  \\\n   HomogeneousMultivector{Sig,K}    Multivector{Sig,S}\n       /                \\                             \nBlade{Sig,K,T}    KVector{Sig,K,S}                \n                                                   \n                  ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CompositeMultivector{Sig,S} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"Blade: a scalar multiple of a wedge product of orthogonal basis vectors.\nKVector: a k-vector or homogeneous multivector; a sum of same-grade blades.\nMultivector: a general multivector. All elements in a geometric  algebra can be represented as this type (though not most efficiently).","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"note: Note\nThe mathematical definition of a k-blade is the wedge product of k vectors, not necessarily basis vectors (as in Blade). Thus, not all k-blades are representable as a Blade, but as a KVector (or Multivector) instead.","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"These types have up to three of type parameters:","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"Sig: The metric signature which defines the geometric algebra. This can be any  all-bits value which satisfies the metric signature interface.\nT: The numerical type of the coefficient of a Blade.\nK: An Int specifying the grade of a HomogeneousMultivector.\nS: The storage type of the components vector of a CompositeMultivector.","category":"page"},{"location":"design/#Metric-Signatures","page":"Design and Internals","title":"Metric Signatures","text":"","category":"section"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"The metric signature type parameter Sig defines the dimension of the geometric algebra and the norms of its standard orthonormal basis vectors. Additionally, it allows various default behaviours to be customised through method definitions which dispatch on Sig, as detailed in the metric signature interface.","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"By default, the following metric signature types are implemented:","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"Int, defining a Euclidean metric of that dimension,\nTuple, defining the norms of each basis vector,\nNamedTuple, defining basis vector labels as well as norms,\nCl, a type resembling the notation Cl(p q r) common in literature.","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"julia> @basis 2\n[ Info: Defined basis blades v, v1, v2, v12\n\njulia> basis((t=-1, x=1, y=1, z=1)) |> prod\nBlade{(t = -1, x = 1, y = 1, z = 1), 4, Int64}:\n 1 txyz\n","category":"page"},{"location":"design/#sig-interface","page":"Design and Internals","title":"The metric signature interface","text":"","category":"section"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"The metric signature type parameter may be any isbits value satisying the following interface. As well as defining the geometric algebra, the signature is used to specify basis blade labels, the default array type for multivector components, and other metadata.","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"Required methods Description\ndimension(sig) The dimension of the underlying vector space, or number of basis vectors.\nbasis_vector_norm(sig, i) The norm of the ith basis vector.","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"Optional methods Description\nshow_signature(io, sig) Show the metric signature in a compact human-readable form.\nshow_basis_blade(io, sig, indices) Print a basis blade with the given indices (e.g., v12 or ùíÜ‚ÇÅ‚àßùíÜ‚ÇÇ).\ncomponentstype(sig, N, T) Preferred array type for CompositeMultivector components. (Default is Vector{T} in low dimensions and SparseVector{T} otherwise.)\nsymbolic_optim(sig) Whether to use symbolic code generation to optimise multivector products. (Default is true for low dimensions.)","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"Below is an example of how one might define a geometric algebra with specific behaviours:","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"struct DiracGamma end\n\n# define the algebra\nGeometricAlgebra.dimension(::DiracGamma) = 4\nGeometricAlgebra.basis_vector_norm(::DiracGamma, i) = i > 1 ? -1 : +1\n\n# set the preferred component storage type\nusing StaticArrays\nGeometricAlgebra.componentstype(::DiracGamma, N, T) = MVector{N,T}\n\n# custom labels\nfunction GeometricAlgebra.show_basis_blade(io, ::DiracGamma, indices)\n\tprint(io, join(\"Œ≥\".*GeometricAlgebra.superscript.(indices .- 1)))\nend\n\nbasis(DiracGamma())\n# output\n4-element Vector{Blade{DiracGamma(), 1, Int64}}:\n Œ≥‚Å∞\n Œ≥¬π\n Œ≥¬≤\n Œ≥¬≥","category":"page"},{"location":"design/#Symbolic-Algebra-and-Code-Generation","page":"Design and Internals","title":"Symbolic Algebra and Code Generation","text":"","category":"section"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"Thanks to the wonderful SymbolicUtils package, the same code originally written for numerical multivectors readily works with symbolic components. For example, we can compute the product of two vectors symbolically as follows:","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"julia> GeometricAlgebra.symbolic_components.([:x, :y], 3)\n2-element Vector{Vector{SymbolicUtils.Term{Real, Nothing}}}:\n [x[1], x[2], x[3]]\n [y[1], y[2], y[3]]\n\njulia> KVector{3,1}.(ans)\n2-element Vector{KVector{3, 1, Vector{SymbolicUtils.Term{Real, Nothing}}}}:\n x[1]v1 + x[2]v2 + x[3]v3\n y[1]v1 + y[2]v2 + y[3]v3\n\njulia> prod(ans)\n8-component Multivector{3, Vector{Any}}:\n x[1]*y[1] + x[2]*y[2] + x[3]*y[3]\n x[1]*y[2] - x[2]*y[1] v12 + x[1]*y[3] - x[3]*y[1] v13 + x[2]*y[3] - x[3]*y[2] v23\n","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"This makes it easy to optimize multivector operations by first performing the general calculation symbolically, then converting the resulting expression into unrolled code.  (See symbolic_optim() for details.)","category":"page"},{"location":"design/","page":"Design and Internals","title":"Design and Internals","text":"By default, symbolic code generation is used for most products in up to eight dimensions (above which general algebraic expressions become unwieldy). This can be changed a per-algebra basis by defining methods for use_symbolic_optim().","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Multivector-Types","page":"Reference","title":"Multivector Types","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"types.jl\"]\nModules = [GeometricAlgebra]","category":"page"},{"location":"reference/#GeometricAlgebra.AbstractMultivector","page":"Reference","title":"GeometricAlgebra.AbstractMultivector","text":"AbstractMultivector{Sig}\n\nSupertype of all elements in the geometric algebra defined by the metric signature Sig.\n\nSubtypes\n\n                   AbstractMultivector{Sig}\n                     /                  \\\n   HomogeneousMultivector{Sig,K}    Multivector{Sig,S}\n       /               \\                             \nBlade{Sig,K,T}   KVector{Sig,K,S}                \n                                                   \n                 ‚ï∞‚îÄ‚îÄ‚îÄ CompositeMultivector{Sig,S} ‚îÄ‚îÄ‚îÄ‚ïØ\n\nBlade: a scalar multiple of a wedge product of orthogonal basis vectors.\nKVector: a homogeneous multivector; a sum of same-grade blades.\nMultivector: an inhomogeneous multivector. All elements in a geometric  algebra can be represented as this type (though not most efficiently).\n\nnote: Note\nThe mathematical definition of a k-blade is the wedge product of k vectors, not necessarily basis vectors (as in Blade). Thus, not all k-blades are representable as a Blade, but as a KVector (or Multivector) instead.\n\nType Parameters\n\nSig: The metric signature which defines the geometric algebra. This can be any  all-bits value which satisfies the metric signature interface.  For example, (1, 1, 1) or EuclideanSignature(3) both  define the standard geometric algebra of ‚Ñù^3.\nT: The numerical type of the coefficient of a Blade.\nK: An Int specifying the grade of a HomogeneousMultivector.\nS: The storage type of the components of a CompositeMultivector. This is  assumed to be mutable, and is usually a subtype of Vector, MVector or SparseVector.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.Blade","page":"Reference","title":"GeometricAlgebra.Blade","text":"Blade{Sig,K,T} <: HomogeneousMultivector{Sig,K}\n\nA blade of grade K with basis blade bits and scalar coefficient of type T.\n\nParameters\n\nSig: Metric signature defining the geometric algebra, retrieved with signature().\nK: Grade of the blade, equal to count_ones(bits), retrieved with grade().\nT: Numerical type of the scalar coefficient, retrieved with eltype().\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.Blade-Union{Tuple{Pair}, Tuple{Sig}} where Sig","page":"Reference","title":"GeometricAlgebra.Blade","text":"Blade{Sig}(bits, coeff)\nBlade{Sig}(bits => coeff)\n\nBasis blade with indices encoded by bits and scalar coefficient coeff.\n\nExamples\n\njulia> Blade{3}(0b110 => 42) # a grade 2 blade in 3 dimensions\nBlade{3, 2, Int64}:\n 42 v23\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.HomogeneousMultivector","page":"Reference","title":"GeometricAlgebra.HomogeneousMultivector","text":"HomogeneousMultivector{Sig,K} <: AbstractMultivector{Sig}\n\nAbstract supertype of Blade and KVector.\n\nParameters\n\nSig: Metric signature defining the geometric algebra, retrieved with signature().\nK: Grade of the blade or multivector, retrieved with grade().\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.KVector","page":"Reference","title":"GeometricAlgebra.KVector","text":"KVector{Sig,K,S} <: HomogeneousMultivector{Sig,K}\n\nA homogeneous multivector of grade K with storage type S.\n\nParameters\n\nSig: Metric signature defining the geometric algebra, retrieved with signature().\nK: Grade of the multivector, retrieved with grade().\nS: Storage type of the multivector components, usually a subtype of AbstractVector.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.KVector-Union{Tuple{S}, Tuple{K}, Tuple{Sig}} where {Sig, K, S}","page":"Reference","title":"GeometricAlgebra.KVector","text":"KVector{Sig,K}(comps)\n\nKVector of grade K with components vector comps.\n\nExamples\n\njulia> KVector{3,2}(1:3) # 3D bivector\n3-component KVector{3, 2, UnitRange{Int64}}:\n 1 v12\n 2 v13\n 3 v23\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.Multivector","page":"Reference","title":"GeometricAlgebra.Multivector","text":"Multivector{Sig,S} <: AbstractMultivector{Sig}\n\nA general (possibly inhomogeneous) multivector.\n\nAll elements of a geometric algebra are representable as a Multivector.\n\nParameters\n\nSig: Metric signature defining the geometric algebra, retrieved with signature().\nS: Storage type of the multivector components, usually a subtype of AbstractVector.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.Multivector-Union{Tuple{S}, Tuple{Sig}} where {Sig, S}","page":"Reference","title":"GeometricAlgebra.Multivector","text":"Multivector{Sig}(comps)\n\nGeneral multivector with components vector comps. The components are ordered first by grade, then lexicographically (see GeometricAlgebra.mmv_bits).\n\nExamples\n\njulia> Multivector{3}(1:2^3)\n8-component Multivector{3, UnitRange{Int64}}:\n 1\n 2 v1 + 3 v2 + 4 v3\n 5 v12 + 6 v13 + 7 v23\n 8 v123\n\njulia> grade(ans, 1)\n3-component KVector{3, 1, UnitRange{Int64}}:\n 2 v1\n 3 v2\n 4 v3\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.eltype-Union{Tuple{Union{Type{var\"#s4\"}, var\"#s4\"} where var\"#s4\"<:(Blade{Sig, K, T} where {Sig, K})}, Tuple{T}} where T","page":"Reference","title":"Base.eltype","text":"eltype(::AbstractMultivector)\n\nThe numerical type of the components of a multivector instance (or type).\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.dimension-Union{Tuple{Union{Type{var\"#s4\"}, var\"#s4\"} where var\"#s4\"<:AbstractMultivector{Sig}}, Tuple{Sig}} where Sig","page":"Reference","title":"GeometricAlgebra.dimension","text":"dimension(sig)\ndimension(::AbstractMultivector)\n\nThe dimension of the underlying vector space of the geometric algebra. See ncomponents for the dimension of the algebra (i.e., the number of independent components of a general multivector).\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.grade-Union{Tuple{Union{Type{var\"#s4\"}, var\"#s4\"} where var\"#s4\"<:HomogeneousMultivector{Sig, K}}, Tuple{K}, Tuple{Sig}} where {Sig, K}","page":"Reference","title":"GeometricAlgebra.grade","text":"grade(::HomogeneousMultivector{Sig,K}) -> K\n\nThe grade of a homogeneous multivector (a Blade or KVector) instance (or type).\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.ncomponents-Union{Tuple{Union{Type{var\"#s4\"}, var\"#s4\"} where var\"#s4\"<:(KVector{Sig, K})}, Tuple{K}, Tuple{Sig}} where {Sig, K}","page":"Reference","title":"GeometricAlgebra.ncomponents","text":"ncomponents(::CompositeMultivector)\n\nNumber of independent components of a multivector instance (or type).\n\nIn n dimensions, this is binomnk for a KVector and 2^n for a Multivector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.signature-Union{Tuple{Union{Type{var\"#s4\"}, var\"#s4\"} where var\"#s4\"<:AbstractMultivector{Sig}}, Tuple{Sig}} where Sig","page":"Reference","title":"GeometricAlgebra.signature","text":"signature(::AbstractMultivector{Sig}) -> Sig\n\nThe metric signature type parameter of the multivector instance (or type).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Algebraic-Operations","page":"Reference","title":"Algebraic Operations","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"algebra.jl\", \"special.jl\"]\nModules = [GeometricAlgebra]","category":"page"},{"location":"reference/#Base.:~-Tuple{AbstractMultivector}","page":"Reference","title":"Base.:~","text":"~a\nreversion(a::AbstractMultivector)\n\nReversion of a multivector.\n\nReversion is an anti-automorphism defined by reversing the order of the geometric product: ~(a*b) == ~b * ~a. For a k-vector, ~k == reversion_sign(k) == (-1)^(k*(k - 1)/2).\n\nmod(k, 4) reversion_sign(k)\n0 +1\n1 +1\n2 -1\n3 -1\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:'·∂ú-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.:'·∂ú","text":"a'·∂ú\nclifford_conj(a)\n\nClifford conjugate of a multivector.\n\nEquivalent to reversion(involution(a)).\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:‚àß-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.:‚àß","text":"a ‚àß b\nwedge(a, b)\n\nWedge product of multivectors, a.k.a. the outer, exterior or alternating product.\n\nThis is a grade-raising operation, equivalent to graded_prod(+, a, b). If a and b are of grades p and q respectively, then a ‚àß b is the grade p + q part of a*b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:‚äô-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.:‚äô","text":"a ‚äô b\nscalar_prod(a, b) -> Number\n\nScalar part of the multivector product a*b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:‚ãÖ-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.:‚ãÖ","text":"a ‚ãÖ b\ninner(a, b)\n\nInner product of multivectors.\n\nThis is a grade lowering operation, equivalent to graded_prod(abs‚àò-, a, b). If a and b are of grades p and q respectively, then a ‚ãÖ b is the grade p - q part of a*b.\n\nNote that for scalars a and b, the inner product reduces to scalar multiplication, in contrast to some authors (see [D02] for discussion).\n\n[D02]: Leo Dorst, \"The Inner Products of Geometric Algebra\", 2002. doi:10.1007/978-1-4612-0089-5_2\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:‚®º-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.:‚®º","text":"a ‚®º b\nlcontract(a, b)\n\nLeft contraction of multivectors. See also rcontract.\n\nEquivalent to graded_prod((p, q) -> q - p, a, b). If a and b are of grades p and q respectively, then a ‚®º b is the grade q - p part of a*b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.:‚®Ω-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.:‚®Ω","text":"a ‚®Ω b\nrcontract(a, b)\n\nLeft contraction of multivectors. See also lcontract.\n\nEquivalent to graded_prod(-, a, b). If a and b are of grades p and q respectively, then a ‚®Ω b is the grade p - q part of a*b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.clifford_conj-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.clifford_conj","text":"a'·∂ú\nclifford_conj(a)\n\nClifford conjugate of a multivector.\n\nEquivalent to reversion(involution(a)).\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.flipdual","page":"Reference","title":"GeometricAlgebra.flipdual","text":"flipdual(a)\n\nA dual of a multivector, for when the overall sign isn‚Äôt important.\n\nFor a unit basis blade a::Blade, the flipdual satisfies a*flipdual(a) == ¬±I where ¬±I is the unit pseudoscalar or its negative.\n\nComputing the flipdual is cheap: for a Blade, its bits are flipped, and for a CompositeMultivector, the components vector is simply reversed.\n\nThe flipdual is metric independent, but depends on a choice of basis. It differs from the Hodge and Poincar√© duals (which have nicer properties) by a scalar factor. This makes it useful in projective geometry, where scalar factors are largely arbitrary.\n\nSee also hodgedual and poincaredual.\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.graded_multiply-Tuple{Any, Union{Number, SymbolicUtils.Symbolic}}","page":"Reference","title":"GeometricAlgebra.graded_multiply","text":"graded_multiply(f, a::AbstractMultivector)\n\nMultiply the grade k part of a by f(k).\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.graded_prod-Tuple{Any, Union{Number, SymbolicUtils.Symbolic}, Union{Number, SymbolicUtils.Symbolic}}","page":"Reference","title":"GeometricAlgebra.graded_prod","text":"graded_prod(grade_selector::Function, a, b)\n\nA \"graded\" product of multivectors, generalising the wedge , inner  and contraction products. For example, the wedge product is defined as:\n\nwedge(a, b) = graded_prod(+, a, b)\n\nIf grade(a) == p and grade(b) == q, then graded_prod(f, a, b) is the grade f(p, q) part of a*b. The definition extends linearly to general multivectors A and B as\n\n\t(A B)  sum_pq A_p B_q_f(p q)\n\nwhere _k denotes the grade k part.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.hodgedual","page":"Reference","title":"GeometricAlgebra.hodgedual","text":"hodgedual(a) == ~a*I\n\nHodge dual of a multivector.\n\nFor k-vectors a and b, the Hodge dual  satisfies (and is defined by)\n\na  b = a b I\n\nwhere I is the unit pseudoscalar, and a b = a  b is the induced inner product on k-vectors.\n\nThe Hodge dual depends on the metric and orientation (the choice of pseudoscalar).\n\nSee also poincaredual.\n\nExamples\n\njulia> u = KVector{3,1}(1:3)\n3-component KVector{3, 1, UnitRange{Int64}}:\n 1 v1\n 2 v2\n 3 v3\n\njulia> hodgedual(u)\n3-component KVector{3, 2, Vector{Int64}}:\n  3 v12\n -2 v13\n  1 v23\n\njulia> u ‚àß hodgedual(u)\n1-component KVector{3, 3, Vector{Int64}}:\n 14 v123\n\njulia> u ‚äô ~u\n14\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.inner-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.inner","text":"a ‚ãÖ b\ninner(a, b)\n\nInner product of multivectors.\n\nThis is a grade lowering operation, equivalent to graded_prod(abs‚àò-, a, b). If a and b are of grades p and q respectively, then a ‚ãÖ b is the grade p - q part of a*b.\n\nNote that for scalars a and b, the inner product reduces to scalar multiplication, in contrast to some authors (see [D02] for discussion).\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.involution-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.involution","text":"involution(a)\n\nInvolute of a multivector.\n\nInvolution is an automorphism defined by reflecting through the origin: for homogeneous multivectors, involution(a) == (-1)^grade(a)*a.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.lcontract-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.lcontract","text":"a ‚®º b\nlcontract(a, b)\n\nLeft contraction of multivectors. See also rcontract.\n\nEquivalent to graded_prod((p, q) -> q - p, a, b). If a and b are of grades p and q respectively, then a ‚®º b is the grade q - p part of a*b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.poincaredual","page":"Reference","title":"GeometricAlgebra.poincaredual","text":"poincaredual(a)\n\nPoincar√© dual of a multivector.\n\nFor a unit basis blade a::Blade, the Poincar√© dual satisfies a*poincaredual(a) == I where I is the unit pseudoscalar.\n\nThe Poincar√© dual is metric independent, but depends on a choice of basis. This makes is useful in degenerate algebras: non-zero multivectors have non-zero Poincar√© duals, even if their Hodge dual is zero.\n\nSee also hodgedual and flipdual.\n\nExamples\n\njulia> @basis Cl(2,0,1)\n[ Info: Defined basis blades v, v1, v2, v3, v12, v13, v23, v123\n\njulia> hodgedual(v3), v3*v123 # Hodge dual is zero because v3*v3 == 0\n(0, 0)\n\njulia> poincaredual(v3)\nBlade{Cl(2,0,1), 2, Int64}:\n 1 v12\n\n\n\n\n\n","category":"function"},{"location":"reference/#GeometricAlgebra.rcontract-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.rcontract","text":"a ‚®Ω b\nrcontract(a, b)\n\nLeft contraction of multivectors. See also lcontract.\n\nEquivalent to graded_prod(-, a, b). If a and b are of grades p and q respectively, then a ‚®Ω b is the grade p - q part of a*b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.reversion-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.reversion","text":"~a\nreversion(a::AbstractMultivector)\n\nReversion of a multivector.\n\nReversion is an anti-automorphism defined by reversing the order of the geometric product: ~(a*b) == ~b * ~a. For a k-vector, ~k == reversion_sign(k) == (-1)^(k*(k - 1)/2).\n\nmod(k, 4) reversion_sign(k)\n0 +1\n1 +1\n2 -1\n3 -1\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.scalar_prod-Tuple{Union{Number, SymbolicUtils.Symbolic}, Union{Number, SymbolicUtils.Symbolic}}","page":"Reference","title":"GeometricAlgebra.scalar_prod","text":"a ‚äô b\nscalar_prod(a, b) -> Number\n\nScalar part of the multivector product a*b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.wedge-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.wedge","text":"a ‚àß b\nwedge(a, b)\n\nWedge product of multivectors, a.k.a. the outer, exterior or alternating product.\n\nThis is a grade-raising operation, equivalent to graded_prod(+, a, b). If a and b are of grades p and q respectively, then a ‚àß b is the grade p + q part of a*b.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.matrix_repr-Tuple{HomogeneousMultivector}","page":"Reference","title":"GeometricAlgebra.matrix_repr","text":"matrix_repr(a::AbstractMultivector)\n\nMatrix representation of a multivector.\n\nThis is an injective homomorphism from the geometric algebra to a matrix subalgebra (i.e., it is linear, and preserves algebraic products).\n\nSee also vector_repr.\n\nExamples\n\njulia> @basis 2\n[ Info: Defined basis blades v, v1, v2, v12\n\njulia> matrix_repr(v1)\n4√ó4 Matrix{Int64}:\n 0  1  0  0\n 1  0  0  0\n 0  0  0  1\n 0  0  1  0\n\njulia> matrix_repr(v1*v2) == matrix_repr(v1)matrix_repr(v2)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.vector_repr-Tuple{AbstractMultivector}","page":"Reference","title":"GeometricAlgebra.vector_repr","text":"vector_repr(a::AbstractMultivector)\n\nVector representation of a multivector. See also matrix_repr.\n\nExamples\n\njulia> @basis 2\n[ Info: Defined basis blades v, v1, v2, v12\n\njulia> vector_repr(v1*v2) == matrix_repr(v1)vector_repr(v2)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"reference/#Metric-Signatures","page":"Reference","title":"Metric Signatures","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"signatures.jl\"]\nModules = [GeometricAlgebra]","category":"page"},{"location":"reference/#GeometricAlgebra.Cl","page":"Reference","title":"GeometricAlgebra.Cl","text":"Cl(p, q=0, r=0)\n\nMetric signature where p, q and r is the number of basis vectors of norm +1, -1 and 0, respectively.\n\nExamples\n\njulia> basis(Cl(1,3))\n4-element Vector{Blade{Cl(1,3), 1, Int64}}:\n v1\n v2\n v3\n v4\n\njulia> ans .^ 2\n4-element Vector{Blade{Cl(1,3), 0, Int64}}:\n  1\n -1\n -1\n -1\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.basis-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.basis","text":"basis(sig; grade=1)\n\nReturn basis blades for the geometric algebra defined by the metric signature sig.\n\nSee also @basis and @basisall.\n\nExamples\n\njulia> basis(3)\n3-element Vector{Blade{3, 1, Int64}}:\n v1\n v2\n v3\n\njulia> prod(basis(\"-+++\"))\nBlade{‚ü®-+++‚ü©, 4, Int64}:\n 1 v1234\n\njulia> basis(Cl(1,3); grade=2)\n6-element Vector{Blade{Cl(1,3), 2, Int64}}:\n v12\n v13\n v23\n v14\n v24\n v34\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.cayleytable-Tuple{Any, Vararg{Any}}","page":"Reference","title":"GeometricAlgebra.cayleytable","text":"cayleytable(sig, op=*)\ncayleytable(objs, op=*)\n\nDisplay a multivector multiplication table.\n\nThe first argument may be a metric signature or any vector of objects which can be combined with the binary operator op.\n\nThe keyword argument title sets the contents of the top-left cell.\n\nExamples\n\njulia> cayleytable(3)\n (‚Üì) * (‚Üí) ‚îÇ    1 ‚îÇ   v1     v2    v3 ‚îÇ  v12    v13   v23 ‚îÇ v123\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n         1 ‚îÇ    1 ‚îÇ   v1     v2    v3 ‚îÇ  v12    v13   v23 ‚îÇ v123\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n        v1 ‚îÇ   v1 ‚îÇ    1    v12   v13 ‚îÇ   v2     v3  v123 ‚îÇ  v23\n        v2 ‚îÇ   v2 ‚îÇ -v12      1   v23 ‚îÇ  -v1  -v123    v3 ‚îÇ -v13\n        v3 ‚îÇ   v3 ‚îÇ -v13   -v23     1 ‚îÇ v123    -v1   -v2 ‚îÇ  v12\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n       v12 ‚îÇ  v12 ‚îÇ  -v2     v1  v123 ‚îÇ   -1   -v23   v13 ‚îÇ  -v3\n       v13 ‚îÇ  v13 ‚îÇ  -v3  -v123    v1 ‚îÇ  v23     -1  -v12 ‚îÇ   v2\n       v23 ‚îÇ  v23 ‚îÇ v123    -v3    v2 ‚îÇ -v13    v12    -1 ‚îÇ  -v1\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n      v123 ‚îÇ v123 ‚îÇ  v23   -v13   v12 ‚îÇ  -v3     v2   -v1 ‚îÇ   -1\n\njulia> cayleytable(basis((t=-1, x=1, y=1, z=1); grade=2), ‚àß)\n (‚Üì) ‚àß (‚Üí) ‚îÇ   tx     ty    xy    tz     xz    yz\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n        tx ‚îÇ    0      0     0     0      0  txyz\n        ty ‚îÇ    0      0     0     0  -txyz     0\n        xy ‚îÇ    0      0     0  txyz      0     0\n        tz ‚îÇ    0      0  txyz     0      0     0\n        xz ‚îÇ    0  -txyz     0     0      0     0\n        yz ‚îÇ txyz      0     0     0      0     0\n\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.componentstype-Tuple{Any, Any, Any}","page":"Reference","title":"GeometricAlgebra.componentstype","text":"componentstype(sig, N, T)\n\nDefault array type used to store components of multivectors of signature sig. The resulting type should be able to store N components (in the case of a fixed-size array) of type T.\n\nThe fallback method returns Vector{T} for dimension(sig) <= 8, and SparseVector{T} otherwise.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.ncomponents-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.ncomponents","text":"ncomponents(sig)\nncomponents(sig, k)\n\nDimension of (the grade-k subspace of) the geometric algebra of metric signature sig, viewed as a vector space.\n\nIf the dimension of the underlying vector space (see dimension) in n, then the algebra is 2^n-dimensional, and its grade-k subspace binomnk-dimensional.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.show_basis_blade-Tuple{Any, Any, Any}","page":"Reference","title":"GeometricAlgebra.show_basis_blade","text":"show_basis_blade(io, sig, indices::Vector{Int})\n\nShow the basis blade with unit vectors in indices for the geometric algebra defined by sig. Methods dispatching on sig should be added to customise basis blade labels for particular algebras.\n\nExamples\n\njulia> GeometricAlgebra.show_basis_blade(stdout, (1, 1, 1), [1, 3])\nv13\n\njulia> using GeometricAlgebra: subscript\n\njulia> GeometricAlgebra.show_basis_blade(io, sig, indices) = print(io, join(\"ùíÜ\".*subscript.(indices), \"‚àß\"))\n\njulia> prod(basis(4))\nBlade{‚ü®++++‚ü©, 4, Int64} of grade 4:\n 1 ùíÜ‚ÇÅ‚àßùíÜ‚ÇÇ‚àßùíÜ‚ÇÉ‚àßùíÜ‚ÇÑ\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.show_signature-Tuple{Any, Any}","page":"Reference","title":"GeometricAlgebra.show_signature","text":"show_signature(io, sig)\n\nPretty-print the metric signature sig.\n\nThis is used to display the metric signature type parameter in AbstractMultivector subtypes to reduce visual noise. Methods may optionally be added for user-defined metric signatures, in a similar fashion to Base.show.\n\nExamples\n\njulia> sig = (+1,-1,-1,-1)\n(1, -1, -1, -1)\n\njulia> GeometricAlgebra.show_signature(stdout, sig)\n‚ü®+---‚ü©\n\njulia> Blade{sig}\nBlade{‚ü®+---‚ü©} (pretty-printed Blade{(1, -1, -1, -1)})\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.@basis-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.@basis","text":"@basis sig\n\nPopulate namespace with basis blades of every grade in the geometric algebra with metric signature sig.\n\nwarning: Warning\nThis defines 2^n variables for an n dimensional signature.\n\nSee also @basisall.\n\nExamples\n\njulia> @basis 3\n[ Info: Defined basis blades v, v1, v2, v3, v12, v13, v23, v123\n\njulia> 1v2 + 3v12\n8-component Multivector{3, Vector{Int64}}:\n 1 v2\n 3 v12\n\n\n\n\n\n","category":"macro"},{"location":"reference/#GeometricAlgebra.@basisall-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.@basisall","text":"@basisall sig\n\nSimilarly to @basis, populate namespace with basis blades, but include all permutations of each blade.\n\nwarning: Warning\nThis defines more than 2^n variables for an n dimensional signature!\n\nExamples\n\njulia> @basisall (+1,-1)\n[ Info: Defined basis blades v, v1, v2, v12, v21\n\njulia> v12 == -v21\ntrue\n\n\n\n\n\n","category":"macro"},{"location":"reference/#Internals","page":"Reference","title":"Internals","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"bits.jl\", \"show.jl\", \"generated.jl\"]\nModules = [GeometricAlgebra]","category":"page"},{"location":"reference/#GeometricAlgebra.BitPermutations","page":"Reference","title":"GeometricAlgebra.BitPermutations","text":"BitPermutations{T}(n)\n\nInfinite iterator returning all unsigned integers of type T, in ascending order, for which Base.count_ones is n.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GeometricAlgebra.bits_of_grade-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.bits_of_grade","text":"bits_of_grade(k[, dim])\n\nGenerate basis blade bits of grade k in ascending order. Yields all basis blades in the dimension dim, if given, otherwise iterates indefinitely.\n\nExamples\n\njulia> GeometricAlgebra.bits_of_grade(2, 4) .|> UInt8 .|> bitstring\n6-element Vector{String}:\n \"00000011\"\n \"00000101\"\n \"00000110\"\n \"00001001\"\n \"00001010\"\n \"00001100\"\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.bits_to_indices-Tuple{Unsigned}","page":"Reference","title":"GeometricAlgebra.bits_to_indices","text":"bits_to_indices(bits)\n\nReturn the positions of the ones in the unsigned integer bits.\n\nUsed to convert between representations of a unit blade. Inverse of indices_to_bits.\n\nExamples\n\njulia> GeometricAlgebra.bits_to_indices(0b1001101)\n4-element Vector{Int64}:\n 1\n 3\n 4\n 7\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.bits_to_mmv_index-Tuple{Unsigned, Any}","page":"Reference","title":"GeometricAlgebra.bits_to_mmv_index","text":"bits_to_mmv_index(bits::Unsigned)\n\nConvert a unit blade bits to a linear index for accessing components of a Multivector. \n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.bits_to_mv_index-Tuple{Unsigned}","page":"Reference","title":"GeometricAlgebra.bits_to_mv_index","text":"bits_to_mv_index(bits::Unsigned)\n\nConvert a unit blade bits to a linear index for accessing components of a KVector. \n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.factor_from_squares-Tuple{Any, Unsigned}","page":"Reference","title":"GeometricAlgebra.factor_from_squares","text":"factor_from_squares(sig, bits::Unsigned)\n\nCompute the overall factor arising from the geometric product between repeated basis vectors.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.geometric_prod_bits-Tuple{Any, Unsigned, Unsigned}","page":"Reference","title":"GeometricAlgebra.geometric_prod_bits","text":"geometric_prod_bits(sig, a::Unsigned, b::Unsigned)\n\nCompute the geometric product between unit blades. Returns a tuple of the overall scalar factor and the resulting unit blade.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.indices_to_bits-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.indices_to_bits","text":"indices_to_bits(indices)\n\nCreate unsigned integer with bits at the positions given in the vector indices.\n\nUsed to convert between representations of a unit blade. Inverse of bits_to_indices.\n\nwarning: Warning\nProduces incorrect results if elements of indices are greater than the number of bits in bits_scalar() <: Unsigned.\n\nExamples\n\njulia> GeometricAlgebra.indices_to_bits([1, 2, 5]) |> UInt16 |> bitstring\n\"0000000000010011\"\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.mmv_bits-Union{Tuple{Val{N}}, Tuple{N}} where N","page":"Reference","title":"GeometricAlgebra.mmv_bits","text":"mmv_bits(::Val{N})\n\nVector of unit blades corresponding to components of an N-dimensional Multivector. Mixed multivector components are ordered first by grade then by numerical value of the unit blade, so that the grade K components are contiguous and given by mv_bits(Val(N), Val(K))\n\nExamples\n\njulia> GeometricAlgebra.mmv_bits(Val(3)) .|> UInt8 .|> bitstring\n8-element Vector{String}:\n \"00000000\"\n \"00000001\"\n \"00000010\"\n \"00000100\"\n \"00000011\"\n \"00000101\"\n \"00000110\"\n \"00000111\"\n\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.mv_bits-Union{Tuple{K}, Tuple{N}, Tuple{Val{N}, Val{K}}} where {N, K}","page":"Reference","title":"GeometricAlgebra.mv_bits","text":"mv_bits(::Val{N}, ::Val{K})\n\nVector of unit blades corresponding to components of an N-dimensional KVector of grade K. KVector components are sorted by the numerical value of the unit blade.\n\nExamples\n\njulia> GeometricAlgebra.mv_bits(Val(4), Val(2)) .|> UInt8 .|> bitstring\n6-element Vector{String}:\n \"00000011\"\n \"00000101\"\n \"00000110\"\n \"00001001\"\n \"00001010\"\n \"00001100\"\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.next_bit_permutation-Tuple{Unsigned}","page":"Reference","title":"GeometricAlgebra.next_bit_permutation","text":"Return the smallest uint larger than the one given which has the same number of binary ones. Algorithm is Gosper‚Äôs hack.\n\nExamples\n\njulia> GeometricAlgebra.next_bit_permutation(0b1011) |> bitstring\n\"00001101\"\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.reversion_sign-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.reversion_sign","text":"reversion_sign(k) = mod(k, 4) <= 1 ? +1 : -1\n\nSign from reversing a k-vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.sign_from_swaps-Tuple{Unsigned, Unsigned}","page":"Reference","title":"GeometricAlgebra.sign_from_swaps","text":"Compute sign flips of blade product due to transposing basis vectors into sorted order. (The full sign of the product will also depend on the basis norms.)\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.show_blade-Tuple{IO, Blade}","page":"Reference","title":"GeometricAlgebra.show_blade","text":"Display blade with parentheses surrounding coefficient if necessary.\n\njulia> GeometricAlgebra.show_blade(stdout, Blade{(x=1,)}(0b1 => 1 + im))\n(1+1im) x\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.show_mixedmultivector-Tuple{IO, Multivector}","page":"Reference","title":"GeometricAlgebra.show_mixedmultivector","text":"Display an inhomogeneous Multivector with each grade on a new line.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.show_multivector-Tuple{IO, KVector}","page":"Reference","title":"GeometricAlgebra.show_multivector","text":"Display homogeneous multivector components as a column of blades, with coefficients and blades aligned using the native alignment mechanism.\n\njulia> a = KVector{(1,1,1),1}([1e3, 1, 1e-3]);\n\njulia> GeometricAlgebra.show_multivector(stdout, a)\n1000.0   v1\n   1.0   v2\n   0.001 v3\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.symbolic_optim-Union{Tuple{Sig}, Tuple{Any, Vararg{Union{Type{var\"#s22\"}, var\"#s22\"} where var\"#s22\"<:AbstractMultivector{Sig}}}} where Sig","page":"Reference","title":"GeometricAlgebra.symbolic_optim","text":"symbolic_optim(f, a, b, ...)\n\nTrace evaluation of f(a, b, ...)::CompositeMultivector on symbolic versions of each AbstractMultivector instance or type a, b, ..., returning an expression suitable as the body of a @generated function.\n\nimportant: Important\nThe names of the generated function arguments must be \"a\", \"b\", \"c\", etc, as these are the names used in the expression retuned by symbolic_optim.\n\nIf use_symbolic_optim(sig) returns false, the function body simply calls f(a, b, ...).\n\nExamples\n\nusing MacroTools: prettify\nu, v = KVector.(basis(2))\nex = GeometricAlgebra.symbolic_optim(*, u, v) |> prettify\n\n# output\n:(let a = components(a), b = components(b)\n      comps = create_array(Vector{Any}, Int64, Val{1}(), Val{(4,)}(), a[1] * b[1] + a[2] * b[2], 0, 0, a[1] * b[2] + (-1 * a[2]) * b[1])\n      (Multivector{2})(comps)\n  end)\n\n\n\n\n\n","category":"method"},{"location":"reference/#GeometricAlgebra.use_symbolic_optim-Tuple{Any}","page":"Reference","title":"GeometricAlgebra.use_symbolic_optim","text":"use_symbolic_optim(sig) -> Bool\n\nWhether to use symbolic code generation to optimize some operations in the geometric algebra with metric signature sig.\n\nBy default, this is enabled if dimension(sig) ‚â§ 8 as a heuristic (in many dimensions, algebraic expressions may become too unwieldy).\n\n\n\n\n\n","category":"method"},{"location":"","page":"GeometricAlgebra","title":"GeometricAlgebra","text":"CurrentModule = GeometricAlgebra\nDocTestSetup = quote\n\tusing GeometricAlgebra\nend","category":"page"},{"location":"#GeometricAlgebra","page":"GeometricAlgebra","title":"GeometricAlgebra","text":"","category":"section"},{"location":"","page":"GeometricAlgebra","title":"GeometricAlgebra","text":"GeometricAlgebra.jl implements basic types for working with geometric (or Clifford) algebras.","category":"page"},{"location":"#Quick-Start","page":"GeometricAlgebra","title":"Quick Start","text":"","category":"section"},{"location":"","page":"GeometricAlgebra","title":"GeometricAlgebra","text":"Construct multivectors by providing the metric signature and grade as type parameters:","category":"page"},{"location":"","page":"GeometricAlgebra","title":"GeometricAlgebra","text":"julia> using GeometricAlgebra\n\njulia> u = KVector([1, -1, 0]) # 3D Euclidean vector\n3-component KVector{3, 1, Vector{Int64}}:\n  1 v1\n -1 v2\n  0 v3\n\njulia> v = KVector{(-1,1,1,1),2}(1:6) # Lorentzian bivector\n6-component KVector{‚ü®-+++‚ü©, 2, UnitRange{Int64}}:\n 1 v12\n 2 v13\n 3 v23\n 4 v14\n 5 v24\n 6 v34\n\njulia> (v + 1)^2\n16-component Multivector{‚ü®-+++‚ü©, Vector{Int64}}:\n -48\n 2 v12 + 4 v13 + 6 v23 + 8 v14 + 10 v24 + 12 v34\n 16 v1234\n","category":"page"},{"location":"","page":"GeometricAlgebra","title":"GeometricAlgebra","text":"You may also obtain an orthonormal basis for a metric signature:","category":"page"},{"location":"","page":"GeometricAlgebra","title":"GeometricAlgebra","text":"julia> v = basis(3)\n3-element Vector{Blade{3, 1, Int64}}:\n v1\n v2\n v3\n\njulia> exp(10000*2œÄ*v[2]v[3])\n8-component Multivector{3, Vector{Float64}}:\n 1.0\n -9.71365e-13 v23","category":"page"},{"location":"","page":"GeometricAlgebra","title":"GeometricAlgebra","text":"Macros are provided for interactive use:","category":"page"},{"location":"","page":"GeometricAlgebra","title":"GeometricAlgebra","text":"julia> @basis \"+---\"\n[ Info: Defined basis blades v, v1, v2, v3, v4, v12, v13, v14, v23, v24, v34, v123, v124, v134, v234, v1234\n\njulia> @basisall (t = +1, x = -1)\n[ Info: Defined basis blades t, x, tx, xt","category":"page"}]
}
